<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Module hilbish on Hilbish</title><link>https://rosettea.github.io/Hilbish/versions/readline-move/docs/api/hilbish/</link><description>Recent content in Module hilbish on Hilbish</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://rosettea.github.io/Hilbish/versions/readline-move/docs/api/hilbish/index.xml" rel="self" type="application/rss+xml"/><item><title>Module hilbish.abbr</title><link>https://rosettea.github.io/Hilbish/versions/readline-move/docs/api/hilbish/hilbish.abbr/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/readline-move/docs/api/hilbish/hilbish.abbr/</guid><description>Introduction The abbr module manages Hilbish abbreviations. These are words that can be replaced with longer command line strings when entered. As an example, git push can be abbreviated to gp. When the user types gp into the command line, after hitting space or enter, it will expand to git push. Abbreviations can be used as an alternative to aliases. They are saved entirely in the history Instead of the aliased form of the same command.</description></item><item><title>Module hilbish.aliases</title><link>https://rosettea.github.io/Hilbish/versions/readline-move/docs/api/hilbish/hilbish.aliases/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/readline-move/docs/api/hilbish/hilbish.aliases/</guid><description>Introduction The alias interface deals with all command aliases in Hilbish.
Functions add(alias, cmd) This is an alias (ha) for the hilbish.alias function. delete(name) Removes an alias. list() -&amp;gt; table[string, string] Get a table of all aliases, with string keys as the alias and the value as the command. resolve(alias) -&amp;gt; string? Resolves an alias to its original command. Will thrown an error if the alias doesn&amp;rsquo;t exist. hilbish.aliases.add(alias, cmd) This is an alias (ha) for the hilbish.</description></item><item><title>Module hilbish.completion</title><link>https://rosettea.github.io/Hilbish/versions/readline-move/docs/api/hilbish/hilbish.completion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/readline-move/docs/api/hilbish/hilbish.completion/</guid><description>Introduction The completions interface deals with tab completions.
Functions bins(query, ctx, fields) -&amp;gt; entries (table), prefix (string) Return binaries/executables based on the provided parameters. call(name, query, ctx, fields) -&amp;gt; completionGroups (table), prefix (string) Calls a completer function. This is mainly used to call a command completer, which will have a name files(query, ctx, fields) -&amp;gt; entries (table), prefix (string) Returns file matches based on the provided parameters. handler(line, pos) This function contains the general completion handler for Hilbish.</description></item><item><title>Module hilbish.history</title><link>https://rosettea.github.io/Hilbish/versions/readline-move/docs/api/hilbish/hilbish.history/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/readline-move/docs/api/hilbish/hilbish.history/</guid><description>Introduction The history interface deals with command history. This includes the ability to override functions to change the main method of saving history.
Functions add(cmd) Adds a command to the history. all() -&amp;gt; table Retrieves all history as a table. clear() Deletes all commands from the history. get(index) Retrieves a command from the history based on the index. size() -&amp;gt; number Returns the amount of commands in the history. hilbish.</description></item><item><title>Module hilbish.jobs</title><link>https://rosettea.github.io/Hilbish/versions/readline-move/docs/api/hilbish/hilbish.jobs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/readline-move/docs/api/hilbish/hilbish.jobs/</guid><description>Introduction Manage interactive jobs in Hilbish via Lua.
Jobs are the name of background tasks/commands. A job can be started via interactive usage or with the functions defined below for use in external runners.
Functions add(cmdstr, args, execPath) Creates a new job. This function does not run the job. This function is intended to be all() -&amp;gt; table[@Job] Returns a table of all job objects. disown(id) Disowns a job. This simply deletes it from the list of jobs without stopping it.</description></item><item><title>Module hilbish.messages</title><link>https://rosettea.github.io/Hilbish/versions/readline-move/docs/api/hilbish/hilbish.messages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/readline-move/docs/api/hilbish/hilbish.messages/</guid><description>Introduction The messages interface defines a way for Hilbish-integrated commands, user config and other tasks to send notifications to alert the user.z The hilbish.message type is a table with the following keys: title (string): A title for the message notification. text (string): The contents of the message. channel (string): States the origin of the message, hilbish.* is reserved for Hilbish tasks. summary (string): A short summary of the text. icon (string): Unicode (preferably standard emoji) icon for the message notification read (boolean): Whether the full message has been read or not.</description></item><item><title>Module hilbish.module</title><link>https://rosettea.github.io/Hilbish/versions/readline-move/docs/api/hilbish/hilbish.module/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/readline-move/docs/api/hilbish/hilbish.module/</guid><description>Introduction The hilbish.module interface provides a function to load Hilbish plugins/modules. Hilbish modules are Go-written plugins (see https://pkg.go.dev/plugin ) that are used to add functionality to Hilbish that cannot be written in Lua for any reason.
Note that you don&amp;rsquo;t ever need to use the load function that is here as modules can be loaded with a require call like Lua C modules, and the search paths can be changed with the paths property here.</description></item><item><title>Module hilbish.os</title><link>https://rosettea.github.io/Hilbish/versions/readline-move/docs/api/hilbish/hilbish.os/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/readline-move/docs/api/hilbish/hilbish.os/</guid><description> Introduction Provides simple text information properties about the current operating system. This mainly includes the name and version.
Static module fields family Family name of the current OS name Pretty name of the current OS version Version of the current OS</description></item><item><title>Module hilbish.processors</title><link>https://rosettea.github.io/Hilbish/versions/readline-move/docs/api/hilbish/hilbish.processors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/readline-move/docs/api/hilbish/hilbish.processors/</guid><description>hilbish.processors.add() Parameters This function has no parameters.
hilbish.processors.execute() Run all command processors, in order by priority. It returns the processed command (which may be the same as the passed command) and a boolean which states whether to proceed with command execution.
Parameters This function has no parameters.</description></item><item><title>Module hilbish.runner</title><link>https://rosettea.github.io/Hilbish/versions/readline-move/docs/api/hilbish/hilbish.runner/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/readline-move/docs/api/hilbish/hilbish.runner/</guid><description>Introduction The runner interface contains functions that allow the user to change how Hilbish interprets interactive input. Users can add and change the default runner for interactive input to any language or script of their choosing. A good example is using it to write command in Fennel.
Runners are functions that evaluate user input. The default runners in Hilbish can run shell script and Lua code.
A runner is passed the input and has to return a table with these values.</description></item><item><title>Module hilbish.timers</title><link>https://rosettea.github.io/Hilbish/versions/readline-move/docs/api/hilbish/hilbish.timers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/readline-move/docs/api/hilbish/hilbish.timers/</guid><description>Introduction If you ever want to run a piece of code on a timed interval, or want to wait a few seconds, you don&amp;rsquo;t have to rely on timing tricks, as Hilbish has a timer API to set intervals and timeouts.
These are the simple functions hilbish.interval and hilbish.timeout (doc accessible with doc hilbish, or Module hilbish on the Website).
An example of usage:
1local t = hilbish.timers.create(hilbish.timers.TIMEOUT, 5000, function() 2 print &amp;#39;hello!</description></item><item><title>Module hilbish.userDir</title><link>https://rosettea.github.io/Hilbish/versions/readline-move/docs/api/hilbish/hilbish.userdir/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/readline-move/docs/api/hilbish/hilbish.userdir/</guid><description> Introduction This interface just contains properties to know about certain user directories. It is equivalent to XDG on Linux and gets the user&amp;rsquo;s preferred directories for configs and data.
Static module fields config The user&amp;rsquo;s config directory data The user&amp;rsquo;s directory for program data</description></item></channel></rss>