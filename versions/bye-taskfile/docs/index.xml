<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on Hilbish</title><link>https://rosettea.github.io/Hilbish/versions/bye-taskfile/docs/</link><description>Recent content in Introduction on Hilbish</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://rosettea.github.io/Hilbish/versions/bye-taskfile/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Lunacolors</title><link>https://rosettea.github.io/Hilbish/versions/bye-taskfile/docs/lunacolors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/bye-taskfile/docs/lunacolors/</guid><description>Lunacolors is an ANSI color/styling library for Lua. It is included by default in standard Hilbish distributions to provide easy styling for things like prompts and text.
For simple usage, a single color or style is enough. For example, you can just use lunacolors.blue 'Hello world' and that&amp;rsquo;ll return blue text which you can print. This includes styles like bold, underline, etc.
In other usage, you may want to use a format string instead of having multiple nested functions for different styles.</description></item><item><title>Frequently Asked Questions</title><link>https://rosettea.github.io/Hilbish/versions/bye-taskfile/docs/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/bye-taskfile/docs/faq/</guid><description>Is Hilbish POSIX compliant? No, it is not. POSIX compliance is a non-goal. Perhaps in the future, someone would be able to write a native plugin to support shell scripting (which would be against it&amp;rsquo;s main goal, but &amp;hellip;.)
Windows Support? It compiles for Windows (CI ensures it does), but otherwise it is not directly supported. If you&amp;rsquo;d like to improve this situation, checkout the discussion .
Why? Hilbish emerged from the desire of a Lua configured shell.</description></item><item><title>Getting Started</title><link>https://rosettea.github.io/Hilbish/versions/bye-taskfile/docs/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/bye-taskfile/docs/getting-started/</guid><description>To start Hilbish, open a terminal. If Hilbish has been installed and is not the default shell, you can simply run hilbish to start it. This will launch a normal interactive session. To exit, you can either run the exit command or hit Ctrl+D.
Setting as Default Login shell There are a few ways to make Hilbish your default shell. A simple way is to make it your user/login shell.</description></item><item><title/><link>https://rosettea.github.io/Hilbish/versions/bye-taskfile/docs/jobs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/bye-taskfile/docs/jobs/</guid><description>(This has mainly been replaced by hilbish.jobs ).
Hilbish has pretty standard job control. It&amp;rsquo;s missing one or two things, but works well. One thing which is different from other shells (besides Hilbish) itself is the API for jobs, and of course it&amp;rsquo;s in Lua. You can add jobs, stop and delete (disown) them and even get output.
Job Interface The job interface refers to hilbish.jobs.
Functions (Note that in the list here, they&amp;rsquo;re called from hilbish.</description></item><item><title/><link>https://rosettea.github.io/Hilbish/versions/bye-taskfile/docs/timers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/bye-taskfile/docs/timers/</guid><description>This has been moved to the hilbish.timers API doc (accessible by doc api hilbish.timers)</description></item><item><title>Completions</title><link>https://rosettea.github.io/Hilbish/versions/bye-taskfile/docs/completions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/bye-taskfile/docs/completions/</guid><description>Completions for commands can be created with the hilbish.complete function. See the link for how to use it.
To create completions for a command is simple. The callback will be passed 3 parameters:
query (string): The text that the user is currently trying to complete. This should be used to match entries. ctx (string): Contains the entire line. Use this if more text is needed to be parsed for context. fields (string): The ctx split up by spaces.</description></item></channel></rss>