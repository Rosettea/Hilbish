<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hilbish</title><link>https://rosettea.github.io/Hilbish/versions/document-lua/</link><description>Recent content on Hilbish</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://rosettea.github.io/Hilbish/versions/document-lua/index.xml" rel="self" type="application/rss+xml"/><item><title>Actions</title><link>https://rosettea.github.io/Hilbish/versions/document-lua/docs/vim-mode/actions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/document-lua/docs/vim-mode/actions/</guid><description>Vim actions are essentially just when a user uses a Vim keybind. Things like yanking and pasting are Vim actions. This is not an &amp;ldquo;offical Vim thing,&amp;rdquo; just a Hilbish thing.
The hilbish.vimAction hook is thrown whenever a Vim action occurs. It passes 2 arguments: the action name, and an array (table) of args relating to it.
Here is documentation for what the table of args will hold for an appropriate Vim action.</description></item><item><title>Lunacolors</title><link>https://rosettea.github.io/Hilbish/versions/document-lua/docs/lunacolors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/document-lua/docs/lunacolors/</guid><description>Lunacolors is an ANSI color/styling library for Lua. It is included by default in standard Hilbish distributions to provide easy styling for things like prompts and text.
For simple usage, a single color or style is enough. For example, you can just use lunacolors.blue 'Hello world' and that&amp;rsquo;ll return blue text which you can print. This includes styles like bold, underline, etc.
In other usage, you may want to use a format string instead of having multiple nested functions for different styles.</description></item><item><title>Frequently Asked Questions</title><link>https://rosettea.github.io/Hilbish/versions/document-lua/docs/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/document-lua/docs/faq/</guid><description>Is Hilbish POSIX compliant? No, it is not. POSIX compliance is a non-goal. Perhaps in the future, someone would be able to write a native plugin to support shell scripting (which would be against it&amp;rsquo;s main goal, but &amp;hellip;.)
Windows Support? It compiles for Windows (CI ensures it does), but otherwise it is not directly supported. If you&amp;rsquo;d like to improve this situation, checkout the discussion .
Why? Hilbish emerged from the desire of a Lua configured shell.</description></item><item><title>Getting Started</title><link>https://rosettea.github.io/Hilbish/versions/document-lua/docs/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/document-lua/docs/getting-started/</guid><description>To start Hilbish, open a terminal. If Hilbish has been installed and is not the default shell, you can simply run hilbish to start it. This will launch a normal interactive session. To exit, you can either run the exit command or hit Ctrl+D.
Setting as Default Login shell There are a few ways to make Hilbish your default shell. A simple way is to make it your user/login shell.</description></item><item><title>v2.3 Release</title><link>https://rosettea.github.io/Hilbish/versions/document-lua/blog/v2.3-release/</link><pubDate>Sat, 20 Jul 2024 10:05:17 -0400</pubDate><guid>https://rosettea.github.io/Hilbish/versions/document-lua/blog/v2.3-release/</guid><description>The release with full changelogs and prebuilt binaries can be seen at the v2.3.0 tag.
Hilbish v2.3 has now been released! This is small feature and bug fix release which took a while to cme ut since I took a long break from programming in general. The next release will be great, so stay tuned for that.
Features Pipes (via Lua) Commands can now be piped to each other via the Lua API with the hilbish.</description></item><item><title>v2.2 Release</title><link>https://rosettea.github.io/Hilbish/versions/document-lua/blog/v2.2-release/</link><pubDate>Mon, 25 Dec 2023 23:56:36 -0400</pubDate><guid>https://rosettea.github.io/Hilbish/versions/document-lua/blog/v2.2-release/</guid><description>The release with full changelogs and prebuilt binaries can be seen at the v2.2.0 tag.
Welcome to a very long awaited release of Hilbish, and on Christmas. Just think of it as a long preparing, late Christmas gift. :) This release does not contain a whole lot of changes, but it is a new release with enhancements and bug fixes!
Documentation As is a trend, the documentation has been improved by ONE HUNDRED TIMES.</description></item><item><title>Improving Hilbish's Branding</title><link>https://rosettea.github.io/Hilbish/versions/document-lua/blog/improving-this-website/</link><pubDate>Thu, 13 Apr 2023 22:15:31 -0400</pubDate><guid>https://rosettea.github.io/Hilbish/versions/document-lua/blog/improving-this-website/</guid><description>Happy birthday Hilbish! As of last month, Hilbish is now 2 years old. Unfortunately I missed the official date, but I will still make a more focused post on the date (19st).
I decided to fix up this website and Hilbish&amp;rsquo;s logo, so that can be thought of as something for the 2 years milestone?
Logo Hilbish&amp;rsquo;s old logo was.. not that good. It definitely functioned as a logo, but the yellow part of it looked ugly (sorry old logo).</description></item><item><title>v2.1.2 Release</title><link>https://rosettea.github.io/Hilbish/versions/document-lua/blog/v2.1.2-release/</link><pubDate>Mon, 10 Apr 2023 12:27:41 -0400</pubDate><guid>https://rosettea.github.io/Hilbish/versions/document-lua/blog/v2.1.2-release/</guid><description>The release with full changelogs and prebuilt binaries can be seen at the v2.1.2 tag.
This release reverts the April Fool&amp;rsquo;s code additions in v2.1.1. It is functionally equal to v2.1.0. Nice!
A real release will come possibly in a few days or next week, so stay tuned for the good and feature-filled release of v2.2!</description></item><item><title>v2.1.1 Release</title><link>https://rosettea.github.io/Hilbish/versions/document-lua/blog/v2.1.1-release/</link><pubDate>Sat, 01 Apr 2023 18:15:42 -0400</pubDate><guid>https://rosettea.github.io/Hilbish/versions/document-lua/blog/v2.1.1-release/</guid><description>The release with full changelogs and prebuilt binaries can be seen at the v2.1.1 tag.
Welcome to a fresh new release of Hilbish! Some people (or none) may be awaiting the long coming v2.2 release with lots of features, but I needed to push out this little bug fix (wink) release.
Bug Fixes Validation checks for command input When running this version, you may have noticed an odd message that sometimes comes up when running commands.</description></item><item><title>v2.1 Release</title><link>https://rosettea.github.io/Hilbish/versions/document-lua/blog/v2.1-release/</link><pubDate>Tue, 07 Feb 2023 18:25:38 -0400</pubDate><guid>https://rosettea.github.io/Hilbish/versions/document-lua/blog/v2.1-release/</guid><description>The release with full changelogs and prebuilt binaries can be seen at the v2.1.0 tag.
Oh look! A new release of Hilbish! This time is the v2.1 release, with a small amount of features and mainly documentation changes and bug fixes.
Documentation There have been a few documentation enhancements for this release. This includes:
Adding the return types for all functions that need them Documenting Hilbish types like job objects and timers properly.</description></item><item><title>Hilbish v2.0 Release</title><link>https://rosettea.github.io/Hilbish/versions/document-lua/blog/v2.0-release/</link><pubDate>Thu, 29 Dec 2022 01:55:21 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/document-lua/blog/v2.0-release/</guid><description>Hilbish v2.0 has been released! Well actually, it was released a week ago, but I only wrote this Hilbish blog after that.
This is a big release, coming 9 months after the previous v1.2.0 and featuring over 40+ bug fixes and tons of new features and enhancements, so let&amp;rsquo;s see what is in this release.
Documentation When querying about the problems people have with Hilbish, one of the issues was its poor documentation.</description></item><item><title/><link>https://rosettea.github.io/Hilbish/versions/document-lua/docs/hooks/job/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/document-lua/docs/hooks/job/</guid><description>Note: job refers to a job object. You can check doc jobs for more detail.
job.start -&amp;gt; job &amp;gt; Thrown when a new background job starts.
job.done -&amp;gt; job &amp;gt; Thrown when a background jobs exits.</description></item><item><title/><link>https://rosettea.github.io/Hilbish/versions/document-lua/docs/jobs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/document-lua/docs/jobs/</guid><description>(This has mainly been replaced by hilbish.jobs ).
Hilbish has pretty standard job control. It&amp;rsquo;s missing one or two things, but works well. One thing which is different from other shells (besides Hilbish) itself is the API for jobs, and of course it&amp;rsquo;s in Lua. You can add jobs, stop and delete (disown) them and even get output.
Job Interface The job interface refers to hilbish.jobs.
Functions (Note that in the list here, they&amp;rsquo;re called from hilbish.</description></item><item><title/><link>https://rosettea.github.io/Hilbish/versions/document-lua/docs/timers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/document-lua/docs/timers/</guid><description>This has been moved to the hilbish.timers API doc (accessible by doc api hilbish.timers)</description></item><item><title>Command</title><link>https://rosettea.github.io/Hilbish/versions/document-lua/docs/hooks/command/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/document-lua/docs/hooks/command/</guid><description>command.preexec Thrown right before a command is executed.
Variables string input
The raw string that the user typed. This will include the text without changes applied to it (argument substitution, alias expansion, etc.)
string cmdStr
The command that will be directly executed by the current runner.
command.exit Thrown after the user&amp;rsquo;s ran command is finished.
Variables number code
The exit code of what was executed.
string cmdStr
The command or code that was executed</description></item><item><title>Completions</title><link>https://rosettea.github.io/Hilbish/versions/document-lua/docs/completions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/document-lua/docs/completions/</guid><description>Completions for commands can be created with the hilbish.complete function. See the link for how to use it.
To create completions for a command is simple. The callback will be passed 3 parameters:
query (string): The text that the user is currently trying to complete. This should be used to match entries. ctx (string): Contains the entire line. Use this if more text is needed to be parsed for context. fields (string): The ctx split up by spaces.</description></item><item><title>Hilbish</title><link>https://rosettea.github.io/Hilbish/versions/document-lua/docs/hooks/hilbish/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/document-lua/docs/hooks/hilbish/</guid><description>hilbish.exit Sent when Hilbish is going to exit.
Variables This signal returns no variables.
hilbish.vimMode Sent when the Vim mode of Hilbish is changed (like from insert to normal mode). This can be used to change the prompt and notify based on Vim mode.
Variables string modeName
The mode that has been set. Can be these values: insert, normal, delete or replace
hilbish.cancel Sent when the user cancels their command input with Ctrl-C</description></item><item><title>Install</title><link>https://rosettea.github.io/Hilbish/versions/document-lua/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/document-lua/install/</guid><description>Official Binaries The best way to get Hilbish is to get a build directly from GitHub. At any time, there are 2 versions of Hilbish recommended for download: the latest stable release, and development builds from the master branch.
You can download both at any time, but note that the development builds may have breaking changes.
For the latest stable release, check here: https://github.com/Rosettea/Hilbish/releases/latest For a development build: https://nightly.link/Rosettea/Hilbish/workflows/build/master Compiling To read the steps for compiling Hilbish, head over to the GitHub repository.</description></item><item><title>Module bait</title><link>https://rosettea.github.io/Hilbish/versions/document-lua/docs/api/bait/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/document-lua/docs/api/bait/</guid><description>Introduction Bait is the event emitter for Hilbish. Much like Node.js and its events system, many actions in Hilbish emit events. Unlike Node.js, Hilbish events are global. So make sure to pick a unique name!
Usage of the Bait module consists of userstanding event-driven architecture, but it&amp;rsquo;s pretty simple: If you want to act on a certain event, you can catch it. You can act on events via callback functions.</description></item><item><title>Module commander</title><link>https://rosettea.github.io/Hilbish/versions/document-lua/docs/api/commander/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/document-lua/docs/api/commander/</guid><description>Introduction Commander is the library which handles Hilbish commands. This makes the user able to add Lua-written commands to their shell without making a separate script in a bin folder. Instead, you may simply use the Commander library in your Hilbish config.
1local commander = require &amp;#39;commander&amp;#39; 2 3commander.register(&amp;#39;hello&amp;#39;, function(args, sinks) 4 sinks.out:writeln &amp;#39;Hello world!&amp;#39; 5end) In this example, a command with the name of hello is created that will print Hello world!</description></item><item><title>Module dirs</title><link>https://rosettea.github.io/Hilbish/versions/document-lua/docs/nature/dirs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/document-lua/docs/nature/dirs/</guid><description>dirs.setOld(d) Sets the old directory string.
Parameters d string
dirs.push() Add d to the recent directories list.
Parameters This function has no parameters.
dirs.peak(num) Look at num amount of recent directories, starting from the latest.
Parameters num number
dirs.pop(num) Remove the specified amount of dirs from the recent directories list.
Parameters num number
dirs.recent(idx) Get entry from recent directories list based on index.
Parameters idx number</description></item><item><title>Module fs</title><link>https://rosettea.github.io/Hilbish/versions/document-lua/docs/api/fs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/document-lua/docs/api/fs/</guid><description>Introduction The fs module provides filesystem functions to Hilbish. While Lua&amp;rsquo;s standard library has some I/O functions, they&amp;rsquo;re missing a lot of the basics. The fs library offers more functions and will work on any operating system Hilbish does.
Functions abs(path) -&amp;gt; string Returns an absolute version of the path. basename(path) -&amp;gt; string Returns the &amp;ldquo;basename,&amp;rdquo; or the last part of the provided path. If path is empty, cd(dir) Changes Hilbish&amp;rsquo;s directory to dir.</description></item><item><title>Module hilbish.aliases</title><link>https://rosettea.github.io/Hilbish/versions/document-lua/docs/api/hilbish/hilbish.aliases/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/document-lua/docs/api/hilbish/hilbish.aliases/</guid><description>Introduction The alias interface deals with all command aliases in Hilbish.
Functions add(alias, cmd) This is an alias (ha) for the hilbish.alias function. delete(name) Removes an alias. list() -&amp;gt; table[string, string] Get a table of all aliases, with string keys as the alias and the value as the command. resolve(alias) -&amp;gt; string? Resolves an alias to its original command. Will thrown an error if the alias doesn&amp;rsquo;t exist. hilbish.aliases.add(alias, cmd) This is an alias (ha) for the hilbish.</description></item><item><title>Module hilbish.completion</title><link>https://rosettea.github.io/Hilbish/versions/document-lua/docs/api/hilbish/hilbish.completion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/document-lua/docs/api/hilbish/hilbish.completion/</guid><description>Introduction The completions interface deals with tab completions.
Functions bins(query, ctx, fields) -&amp;gt; entries (table), prefix (string) Return binaries/executables based on the provided parameters. call(name, query, ctx, fields) -&amp;gt; completionGroups (table), prefix (string) Calls a completer function. This is mainly used to call a command completer, which will have a name files(query, ctx, fields) -&amp;gt; entries (table), prefix (string) Returns file matches based on the provided parameters. handler(line, pos) This function contains the general completion handler for Hilbish.</description></item><item><title>Module hilbish.editor</title><link>https://rosettea.github.io/Hilbish/versions/document-lua/docs/api/hilbish/hilbish.editor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/document-lua/docs/api/hilbish/hilbish.editor/</guid><description>Introduction The hilbish.editor interface provides functions to directly interact with the line editor in use.
Functions getLine() -&amp;gt; string Returns the current input line. getVimRegister(register) -&amp;gt; string Returns the text that is at the register. insert(text) Inserts text into the Hilbish command line. getChar() -&amp;gt; string Reads a keystroke from the user. This is in a format of something like Ctrl-L. setVimRegister(register, text) Sets the vim register at register to hold the passed text.</description></item><item><title>Module hilbish.history</title><link>https://rosettea.github.io/Hilbish/versions/document-lua/docs/api/hilbish/hilbish.history/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/document-lua/docs/api/hilbish/hilbish.history/</guid><description>Introduction The history interface deals with command history. This includes the ability to override functions to change the main method of saving history.
Functions add(cmd) Adds a command to the history. all() -&amp;gt; table Retrieves all history as a table. clear() Deletes all commands from the history. get(index) Retrieves a command from the history based on the index. size() -&amp;gt; number Returns the amount of commands in the history. hilbish.</description></item><item><title>Module hilbish.jobs</title><link>https://rosettea.github.io/Hilbish/versions/document-lua/docs/api/hilbish/hilbish.jobs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/document-lua/docs/api/hilbish/hilbish.jobs/</guid><description>Introduction Manage interactive jobs in Hilbish via Lua.
Jobs are the name of background tasks/commands. A job can be started via interactive usage or with the functions defined below for use in external runners.
Functions add(cmdstr, args, execPath) Creates a new job. This function does not run the job. This function is intended to be all() -&amp;gt; table[@Job] Returns a table of all job objects. disown(id) Disowns a job. This simply deletes it from the list of jobs without stopping it.</description></item><item><title>Module hilbish.messages</title><link>https://rosettea.github.io/Hilbish/versions/document-lua/docs/api/hilbish/hilbish.messages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/document-lua/docs/api/hilbish/hilbish.messages/</guid><description>hilbish.messages.all() Parameters This function has no parameters.
hilbish.messages.clear() Parameters This function has no parameters.
hilbish.messages.delete() Parameters This function has no parameters.
hilbish.messages.read() Parameters This function has no parameters.
hilbish.messages.send(message) Sends a message.
Parameters message hilbish.message
hilbish.messages.readAll() Parameters This function has no parameters.
hilbish.messages.unreadCount() Parameters This function has no parameters.
hilbish.messages.all() Parameters This function has no parameters.
hilbish.messages.clear() Parameters This function has no parameters.
hilbish.messages.delete() Parameters This function has no parameters.</description></item><item><title>Module hilbish.module</title><link>https://rosettea.github.io/Hilbish/versions/document-lua/docs/api/hilbish/hilbish.module/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/document-lua/docs/api/hilbish/hilbish.module/</guid><description>Introduction The hilbish.module interface provides a function to load Hilbish plugins/modules. Hilbish modules are Go-written plugins (see https://pkg.go.dev/plugin ) that are used to add functionality to Hilbish that cannot be written in Lua for any reason.
Note that you don&amp;rsquo;t ever need to use the load function that is here as modules can be loaded with a require call like Lua C modules, and the search paths can be changed with the paths property here.</description></item><item><title>Module hilbish.os</title><link>https://rosettea.github.io/Hilbish/versions/document-lua/docs/api/hilbish/hilbish.os/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/document-lua/docs/api/hilbish/hilbish.os/</guid><description> Introduction Provides simple text information properties about the current operating system. This mainly includes the name and version.
Static module fields family Family name of the current OS name Pretty name of the current OS version Version of the current OS</description></item><item><title>Module hilbish.runner</title><link>https://rosettea.github.io/Hilbish/versions/document-lua/docs/api/hilbish/hilbish.runner/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/document-lua/docs/api/hilbish/hilbish.runner/</guid><description>Introduction The runner interface contains functions that allow the user to change how Hilbish interprets interactive input. Users can add and change the default runner for interactive input to any language or script of their choosing. A good example is using it to write command in Fennel.
Runners are functions that evaluate user input. The default runners in Hilbish can run shell script and Lua code.
A runner is passed the input and has to return a table with these values.</description></item><item><title>Module hilbish.timers</title><link>https://rosettea.github.io/Hilbish/versions/document-lua/docs/api/hilbish/hilbish.timers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/document-lua/docs/api/hilbish/hilbish.timers/</guid><description>Introduction If you ever want to run a piece of code on a timed interval, or want to wait a few seconds, you don&amp;rsquo;t have to rely on timing tricks, as Hilbish has a timer API to set intervals and timeouts.
These are the simple functions hilbish.interval and hilbish.timeout (doc accessible with doc hilbish, or Module hilbish on the Website).
An example of usage:
1local t = hilbish.timers.create(hilbish.timers.TIMEOUT, 5000, function() 2 print &amp;#39;hello!</description></item><item><title>Module hilbish.userDir</title><link>https://rosettea.github.io/Hilbish/versions/document-lua/docs/api/hilbish/hilbish.userdir/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/document-lua/docs/api/hilbish/hilbish.userdir/</guid><description> Introduction This interface just contains properties to know about certain user directories. It is equivalent to XDG on Linux and gets the user&amp;rsquo;s preferred directories for configs and data.
Static module fields config The user&amp;rsquo;s config directory data The user&amp;rsquo;s directory for program data</description></item><item><title>Module terminal</title><link>https://rosettea.github.io/Hilbish/versions/document-lua/docs/api/terminal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/document-lua/docs/api/terminal/</guid><description>Introduction The terminal library is a simple and lower level library for certain terminal interactions.
Functions restoreState() Restores the last saved state of the terminal saveState() Saves the current state of the terminal. setRaw() Puts the terminal into raw mode. size() Gets the dimensions of the terminal. Returns a table with width and height terminal.restoreState() Restores the last saved state of the terminal
Parameters This function has no parameters.</description></item><item><title>Notification</title><link>https://rosettea.github.io/Hilbish/versions/document-lua/docs/features/notifications/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/document-lua/docs/features/notifications/</guid><description>Hilbish features a simple notification system which can be used by other plugins and parts of the shell to notify the user of various actions. This is used via the hilbish.message interface.
A message is defined as a table with the following properties:
icon: A unicode/emoji icon for the notification. title: The title of the message text: Message text/body channel: The source of the message. This should be a unique and easily readable text identifier.</description></item><item><title>Options</title><link>https://rosettea.github.io/Hilbish/versions/document-lua/docs/features/opts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/document-lua/docs/features/opts/</guid><description>Opts are simple toggle or value options a user can set in Hilbish. As toggles, there are things like autocd or history saving. As values, there is the motd which the user can either change to a custom string or disable.
Opts are accessed from the hilbish.opts table. Here they can either be read or modified
autocd Value: boolean Default: false The autocd opt makes it so that lone directories attempted to be executed are instead set as the shell&amp;rsquo;s directory.</description></item><item><title>Runner Mode</title><link>https://rosettea.github.io/Hilbish/versions/document-lua/docs/features/runner-mode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/document-lua/docs/features/runner-mode/</guid><description>Hilbish allows you to change how interactive text can be interpreted. This is mainly due to the fact that the default method Hilbish uses is that it runs Lua first and then falls back to shell script.
In some cases, someone might want to switch to just shell script to avoid it while interactive but still have a Lua config, or go full Lua to use Hilbish as a REPL. This also allows users to add alternative languages like Fennel as the interactive script runner.</description></item><item><title>Signal</title><link>https://rosettea.github.io/Hilbish/versions/document-lua/docs/hooks/signal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/document-lua/docs/hooks/signal/</guid><description>signal.sigint Thrown when Hilbish receive the SIGINT signal, aka when Ctrl-C is pressed.
Variables This signal returns no variables.
signal.resize Thrown when the terminal is resized.
Variables This signal returns no variables.
signal.sigusr1 Thrown when SIGUSR1 is sent to Hilbish.
Variables This signal returns no variables.
signal.sigusr2 Thrown when SIGUSR2 is sent to Hilbish.
Variables This signal returns no variables.</description></item><item><title>Welcome to the Hilbish blog</title><link>https://rosettea.github.io/Hilbish/versions/document-lua/blog/welcome/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/document-lua/blog/welcome/</guid><description>Hello! Welcome to the Hilbish blog. This will mainly contain release announcements and some other things relating to Hilbish (development).</description></item></channel></rss>